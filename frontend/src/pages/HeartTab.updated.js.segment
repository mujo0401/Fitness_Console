  const fetchHeartData = async () => {
    if (\!isValid(date)) return;
    
    setLoading(true);
    setError(null);
    try {
      const formattedDate = format(date, 'yyyy-MM-dd');
      console.log(`üîç Fetching heart rate data for period: ${period}, date: ${formattedDate}`);
      
      let data;
      let dataSource = 'api'; // Track where the data came from: 'api', 'test-mock', or 'generated'
      
      // Step 1: Try the regular endpoint first
      try {
        console.log('üîÑ Attempting to fetch data from regular endpoint');
        data = await heartRateService.getHeartRateData(period, formattedDate);
        console.log('üìä API Response from regular endpoint:', data);
      } catch (apiError) {
        console.error("üî¥ API Error from regular endpoint:", apiError);
        
        // Step 2: If it fails with 401, try the test-mock endpoint
        if (apiError.response && apiError.response.status === 401) {
          console.log('üîÑ Regular endpoint returned 401, attempting to fetch from test-mock endpoint');
          try {
            data = await heartRateService.getTestMockData();
            dataSource = 'test-mock';
            console.log('üìä API Response from test-mock endpoint:', data);
          } catch (mockApiError) {
            console.error("üî¥ API Error from test-mock endpoint:", mockApiError);
            
            // Step 3: Only if both fail, fall back to the generateMockHeartRateData function
            console.log('‚ö†Ô∏è Both endpoints failed, falling back to generated mock data');
            data = generateMockHeartRateData(period);
            dataSource = 'generated';
            console.log('üìä Generated mock data:', data);
          }
        } else {
          // Not a 401 error, fall back to mock data
          console.log('‚ö†Ô∏è API error is not a 401, falling back to generated mock data');
          data = generateMockHeartRateData(period);
          dataSource = 'generated';
          console.log('üìä Generated mock data:', data);
        }
      }
      
      if (data && data.data && data.data.length > 0) {
        console.log(`‚úÖ Received ${data.data.length} heart rate data points from ${dataSource}`);
        console.log('üìã Sample data point:', data.data[0]);
        
        setHeartData(data.data);
        setAbnormalEvents(data.abnormal_events || []);
        
        // Calculate heart rate variability
        const hrvValue = calculateHRV(data.data);
        setHrv(hrvValue);
      } else {
        console.warn('‚ö†Ô∏è Received empty heart rate data, using generated mock data');
        // If no data, generate mock data for demonstration
        const mockData = generateMockHeartRateData(period);
        setHeartData(mockData.data);
        setAbnormalEvents(mockData.abnormal_events || []);
        
        // Calculate heart rate variability from mock data
        const hrvValue = calculateHRV(mockData.data);
        setHrv(hrvValue);
      }
    } catch (err) {
      console.error("üî¥ Unexpected error in fetchHeartData:", err);
      setError("Failed to load heart rate data. Using demo data for visualization.");
      
      // In case of error, generate mock data for demonstration
      const mockData = generateMockHeartRateData(period);
      setHeartData(mockData.data);
      setAbnormalEvents(mockData.abnormal_events || []);
      
      // Calculate heart rate variability from mock data
      const hrvValue = calculateHRV(mockData.data);
      setHrv(hrvValue);
    } finally {
      setLoading(false);
    }
  };
